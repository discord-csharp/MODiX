@using Modix.Web.Models
@using Modix.Web.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Modix.Web.Shared.Services
@using MudBlazor
@using System.Security.Claims

<div class="d-flex align-center">
    @if (AvatarUrl is not null && Username is not null)
    {
        <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomCenter" FullWidth="true" PopoverClass="fit-content">
            <ActivatorContent>
                <div class="d-flex align-center">
                    <MudImage Src="@AvatarUrl" Class="mr-2 rounded" Height="32" Width="32" />
                    <MudText Typo="Typo.h5" Class="d-none d-sm-flex"><b>@Username</b></MudText>
                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" />
                </div>
            </ActivatorContent>
            <ChildContent>
                <MudNavLink IconColor="Color.Surface" Icon="@Icons.Material.Filled.Logout" Href="logout">Log Out</MudNavLink>
            </ChildContent>
        </MudMenu>
    }
    <MudDivider Class="mr-3" Vertical="true" FlexItem="true" />
    <MudMenu AnchorOrigin="Origin.BottomRight">
        <ActivatorContent>
            <div class="d-flex align-center">
                <MudImage Src="@(SelectedGuild?.IconUrl)" Height="32" Width="32" Class="rounded-lg vertical-bottom" />
                <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" />
            </div>
        </ActivatorContent>
        <ChildContent>
            @foreach (var guildOption in GuildOptions)
            {
                <MudMenuItem Style="white-space: nowrap" OnClick="() => SelectGuild(guildOption.Id)">
                    <MudImage Src="@guildOption.IconUrl" Height="24" Width="24" Class="rounded-lg vertical-bottom" />
                    @guildOption.Name
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
</div>

<style>
    .fit-content {
        max-width: fit-content !important;
    }
</style>


@code {
    private string? AvatarUrl { get; set; }
    private string? Username { get; set; }

    private IEnumerable<GuildOption> GuildOptions { get; set; } = Array.Empty<GuildOption>();
    private GuildOption? SelectedGuild { get; set; }

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    [Inject]
    public required ICookieService CookieService { get; set; }

    [CascadingParameter]
    public required SessionState SessionState { get; set; }

    [Inject]
    public required IHttpClientFactory HttpClientFactory { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null)
            return;

        var authState = await AuthenticationState;
        if (authState.User.Identity?.IsAuthenticated is not true)
            return;

        var avatarHash = authState.User.FindFirst(x => x.Type == nameof(DiscordUser.AvatarHash))?.Value;
        var userId = ulong.Parse(authState.User.FindFirst(d => d.Type == ClaimTypes.NameIdentifier)?.Value);
        AvatarUrl = $"https://cdn.discordapp.com/avatars/{userId}/{avatarHash}.png";
        Username = authState.User.Identity.Name;

        // TODO: Figure out why HttpClient does not have a base address in OnInitializedAsync()

        using var client = HttpClientFactory.CreateClient("api");

        if (client.BaseAddress is null)
            return;

        var result = await client.GetFromJsonAsync<GuildOption[]>("api/guild/guildoptions");

        GuildOptions = result ?? [];
        SelectedGuild = GuildOptions.FirstOrDefault(x => x.Id == SessionState.SelectedGuild);
    }

    private async Task SelectGuild(ulong guildId)
    {
        await CookieService.SetSelectedGuildAsync(guildId);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
