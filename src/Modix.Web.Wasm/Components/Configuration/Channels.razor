@using Microsoft.AspNetCore.Components.Authorization
@using Modix.Web.Shared.Models.Configuration
@using Modix.Web.Wasm.Components
@using MudBlazor
@using Humanizer;
@using Modix.Web.Shared.Models.Common;

<PageTitle>Modix - Channels</PageTitle>
<MudText Typo="Typo.h4">Channel Designations</MudText>

<CascadingAuthenticationState>
    @if (DesignatedChannelMappings is not null && DesignatedChannelTypes is not null)
    {
        <MudDialog @bind-IsVisible="_createDialogVisible" Options="new DialogOptions { FullWidth= true }">
            <TitleContent>
                <MudText Typo="Typo.h5">Assign a Channel</MudText>
            </TitleContent>
            <DialogContent>
                <AutoComplete T="ChannelInformation"
                              SearchFunc="(query) => AutoCompleteChannels(query)"
                              Placeholder="@("#general")"
                              SelectedItemChanged="SelectedChannelChanged"
                              Title="Channel Name" />
                <MudText Class="mt-5" Typo="Typo.h5">Designation</MudText>
                <MudSelect T="DesignatedChannelType?" @bind-Value="_selectedDesignatedChannelType">
                    @foreach (var designation in DesignatedChannelTypes)
                    {
                        <MudSelectItem T="DesignatedChannelType?" Value="@designation"></MudSelectItem>
                    }
                </MudSelect>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled"
                           Disabled="_selectedDesignatedChannelType is null || _selectedChannel is null"
                           Color="Color.Success"
                           OnClick="SaveDesignation">
                    Assign
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleCreateDialog">Cancel</MudButton>
            </DialogActions>
        </MudDialog>

        <MudPaper>
            <MudList Clickable="true" DisablePadding="true">
                @foreach (var designatedChannelType in DesignatedChannelTypes.OrderBy(x => x.ToString()))
                {
                    <MudListItem DisableRipple="true">
                        <div class="d-flex align-center">
                            <div>
                                <MudText>
                                    <b>@designatedChannelType.ToString().Titleize()</b>
                                </MudText>
                                @if (!DesignatedChannelMappings.TryGetValue(designatedChannelType, out var channelDesignations) || !channelDesignations.Any())
                                {
                                    <MudText Style="color: grey; letter-spacing: 1px" Typo="Typo.caption">
                                        <b>NONE ASSIGNED</b>
                                    </MudText>
                                }
                                else
                                {
                                    @foreach (var designatedChannelMapping in channelDesignations)
                                    {
                                        @*TODO*@
                                        @* <IndividualDesignation AuthorizationRoleForDelete="@nameof(AuthorizationClaim.DesignatedChannelMappingDelete)" *@
                                        <IndividualDesignation AuthorizationRoleForDelete="DesignatedChannelMappingDelete"
                                                               Id="@designatedChannelMapping.Id"
                                                               NamePrefix="@("#")"
                                                               Name="@designatedChannelMapping.Name"
                                                               RemoveDesignation="(id) => RemoveDesignation(id, designatedChannelMapping.ChannelDesignation)" />
                                    }
                                }
                            </div>
                            <MudSpacer />
                            <div>
                                @*TODO*@
                                @* <AuthorizeView Roles="@nameof(AuthorizationClaim.DesignatedChannelMappingCreate)"> *@
                                <AuthorizeView Roles="DesignatedChannelMappingCreate">
                                    <MudIconButton OnClick="ToggleCreateDialog" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" />
                                </AuthorizeView>
                            </div>
                        </div>
                    </MudListItem>
                    <MudDivider />
                }
            </MudList>
        </MudPaper>
    }
</CascadingAuthenticationState>

@code {
    [Inject]
    public required ISnackbar Snackbar { get; set; }

    [Inject]
    public required IHttpClientFactory HttpClientFactory { get; set; }

    private Dictionary<DesignatedChannelType, List<DesignatedChannelData>>? DesignatedChannelMappings { get; set; }
    private DesignatedChannelType[]? DesignatedChannelTypes { get; set; }

    private bool _createDialogVisible;
    private DesignatedChannelType? _selectedDesignatedChannelType;
    private ChannelInformation? _selectedChannel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        using var client = HttpClientFactory.CreateClient("api");
        DesignatedChannelMappings = await client.GetFromJsonAsync<Dictionary<DesignatedChannelType, List<DesignatedChannelData>>>("api/config/channels");

        DesignatedChannelTypes = Enum.GetValues<DesignatedChannelType>();

        StateHasChanged();
    }

    private async Task<IEnumerable<ChannelInformation>> AutoCompleteChannels(string query)
    {
        using var client = HttpClientFactory.CreateClient("api");

        var escapedQuery = Uri.EscapeDataString(query);
        var channels = await client.GetFromJsonAsync<ChannelInformation[]>($"api/autocomplete/channels/{escapedQuery}");

        return channels ?? [];
    }

    public void ToggleCreateDialog()
    {
        _createDialogVisible = !_createDialogVisible;
        if (_createDialogVisible)
        {
            _selectedChannel = null;
            _selectedDesignatedChannelType = null;
        }
    }

    private void SelectedChannelChanged(ChannelInformation channel)
    {
        _selectedChannel = channel;
    }

    public async Task SaveDesignation()
    {
        using var client = HttpClientFactory.CreateClient("api");
        var response = await client.PutAsync($"api/config/channels/{_selectedChannel.Id}/{_selectedDesignatedChannelType.Value}", default);

        _createDialogVisible = false;

        if(!response.IsSuccessStatusCode)
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Snackbar.Add(errorMessage, Severity.Error);

            return;
        }

        var id = long.Parse(await response.Content.ReadAsStringAsync());

        if (!DesignatedChannelMappings!.ContainsKey(_selectedDesignatedChannelType.Value))
        {
            DesignatedChannelMappings[_selectedDesignatedChannelType.Value] = new List<DesignatedChannelData>();
        }

        DesignatedChannelMappings[_selectedDesignatedChannelType.Value].Add(new DesignatedChannelData(id, _selectedChannel.Id, _selectedDesignatedChannelType.Value, _selectedChannel.Name));

        Snackbar.Add($"Added designation '{_selectedDesignatedChannelType}' to channel '{_selectedChannel.Name}'", Severity.Success);
    }

    public async Task RemoveDesignation(long id, DesignatedChannelType designatedChannelType)
    {
        using var client = HttpClientFactory.CreateClient("api");
        var response = await client.DeleteAsync($"api/config/channels/{id}");

        response.EnsureSuccessStatusCode();

        var channelMappingsWithType = DesignatedChannelMappings![designatedChannelType];
        var removedChannelMapping = channelMappingsWithType.First(x => x.Id == id);

        channelMappingsWithType.Remove(removedChannelMapping);

        Snackbar.Add($"Removed designation '{designatedChannelType}' from channel '{removedChannelMapping.Name}'", Severity.Success);
    }
}
