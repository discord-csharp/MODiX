@page "/promotions/create"
@using Microsoft.AspNetCore.Authorization
@using Modix.Web.Models;
@using Modix.Web.Shared.Models.Common
@using Modix.Web.Shared.Models.Promotions
@using Modix.Web.Wasm.Components
@using MudBlazor

@*TODO*@
@* @attribute [Authorize(Roles = nameof(AuthorizationClaim.PromotionsCreateCampaign))] *@
@attribute [Authorize(Roles = "PromotionsCreateCampaign")]

<PageTitle>Modix - Start A Campaign</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h4">Start a Campaign</MudText>
    <MudGrid>
        <MudItem xs="12" sm="3">
            <MudPaper Class="d-flex align-center justify-center mud-width-full pa-5 mt-6" Elevation="4">
                <p>Feel like someone deserves recognition? <strong>Start a promotion campaign for them</strong> - even if that person is yourself!</p>
            </MudPaper>
            <MudPaper Class="d-flex align-center justify-center mud-width-full pa-5 mt-6" Elevation="4">
                <p>Once a campaign is started, users can <strong>anonymously comment</strong>, voicing their opinions for or against the individual up for promotion</p>
            </MudPaper>
            <MudPaper Class="d-flex align-center justify-center mud-width-full pa-5 mt-6" Elevation="4">
                <p>Staff will periodically review campaigns. If approved, the user will be <strong>immediately promoted!</strong> If not, they may be permanently denied, or further looked into as the campaign runs its course.</p>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="9">
            <MudItem Class="mb-6">
                <AutoComplete T="ModixUser"
                              SearchFunc="(query) => AutoCompleteAsync(query)"
                              Placeholder="Username or ID"
                              SelectedItemChanged="SelectedUserChanged"
                              Title="Tell us their username">
                    <ItemTemplate Context="user">
                        <MudImage Src="@user.AvatarUrl" Height="24" Width="24" Class="rounded-lg vertical-bottom" />
                        @user.Name
                    </ItemTemplate>
                </AutoComplete>
            </MudItem>
            @if (_selectedUser is not null && _nextRank is not null)
            {
                <div class="mb-4">
                    <MudText Typo="Typo.h5">@_selectedUser.Name can be promoted to this rank</MudText>
                    <MudChip Variant="Variant.Outlined" Style=@($"color: {_nextRank.Color}; border: 2px solid") Label="true">@_nextRank.Name</MudChip>
                </div>

                <div class="mb-4">
                    <MudText Typo="Typo.h5">Finally, say a few words on their behalf</MudText>
                    <MudCard Elevation="4">
                        <MudTextField Disabled="@(_nextRank.Name == "None")"
                                      Class="pa-3"
                                      Immediate="true"
                                      @bind-Value="_promotionComment"
                                      Lines="5"
                                      Margin="Margin.Dense"
                                      Placeholder="They should be promoted because..." />
                    </MudCard>
                </div>

                <MudButton Disabled="@(_nextRank.Name == "None")" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateCampaign">Submit</MudButton>
            }

        </MudItem>

    </MudGrid>
</MudContainer>

@code {

    [Inject]
    public required IHttpClientFactory HttpClientFactory { get; set; }

    [Inject]
    public required ISnackbar Snackbar { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    private ModixUser? _selectedUser;
    private string? _promotionComment;

    private NextRank? _nextRank;

    private async Task SelectedUserChanged(ModixUser user)
    {
        if (user != _selectedUser)
        {
            _nextRank = null;
            _promotionComment = null;
        }

        _selectedUser = user;
        if (user is null)
            return;

        using var client = HttpClientFactory.CreateClient("api");
        _nextRank = await client.GetFromJsonAsync<NextRank>($"api/campaigns/{user.UserId}/nextrank");
    }

    private async Task CreateCampaign()
    {
        try
        {
            using var client = HttpClientFactory.CreateClient("api");

            var response = await client.PutAsJsonAsync("api/campaigns/create", new PromotionCreationData(_selectedUser!.UserId, _promotionComment));

            response.EnsureSuccessStatusCode();

            NavigationManager.NavigateTo("/promotions");
        }
        catch (Exception ex)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add(ex.Message, Severity.Error);
            return;
        }
    }

    private async Task<IEnumerable<ModixUser>> AutoCompleteAsync(string query)
    {
        using var client = HttpClientFactory.CreateClient("api");

        var users = await client.GetFromJsonAsync<ModixUser[]>($"api/autocomplete/users/{query}");

        return users ?? [];
    }
}
