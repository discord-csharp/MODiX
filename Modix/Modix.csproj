<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
  </PropertyGroup>

  <PropertyGroup>
    <NpmBuild Condition=" '$(Configuration)' == 'Debug' ">build-dev</NpmBuild>
    <NpmBuild Condition=" '$(NpmBuild)' == '' ">build</NpmBuild>
    <DevServerRunning>false</DevServerRunning>
    <TargetFramework>netcoreapp3.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="wwwroot\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AspNet.Security.OAuth.Discord" />
    <PackageReference Include="DogStatsD-CSharp-Client" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" />
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" />
    <PackageReference Include="Serilog.AspNetCore" />
    <PackageReference Include="Serilog.Sinks.Console" />
    <PackageReference Include="Serilog.Sinks.RollingFile" />
    <PackageReference Include="Serilog.Sinks.Sentry" />
  </ItemGroup>

  <ItemGroup>
    <ClientSrc Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <UpToDateCheckInput Include="$(SpaRoot)package-lock.json" />
    <UpToDateCheckInput Include="@(ClientSrc)" />

    <UpToDateCheckBuilt Include="$(SpaRoot)node_modules\.npm_timestamp" />
    <UpToDateCheckBuilt Include="$(MSBuildThisFileDirectory)obj\$(Configuration)\.vue_timestamp" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />

    <None Remove="dataprotection\**" />
    <None Remove="logs\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Modix.Bot\Modix.Bot.csproj" />
    <ProjectReference Include="..\Modix.Common\Modix.Common.csproj" />
    <ProjectReference Include="..\Modix.Data\Modix.Data.csproj" />
    <ProjectReference Include="..\Modix.Services\Modix.Services.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="developmentSettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <Target Name="EnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition=" '$(ErrorCode)' != '0' " Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
  </Target>

  <Target Name="CheckDevServerRunning" AfterTargets="EnsureNodeEnv">
    <!-- Run a script that checks if the webpack dev server is running -->
    <Exec Command="node ClientApp\dev-server-running.js" ContinueOnError="true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="DevServerErrorCode" />
    </Exec>

    <CreateProperty Value="true" Condition=" '$(DevServerErrorCode)' == '0' ">
      <Output TaskParameter="Value" PropertyName="DevServerRunning" />
    </CreateProperty>

    <Message Importance="high" Condition=" $(DevServerRunning) " Text="Webpack dev server detected, skipping NPM tasks..." />
  </Target>

  <Target Name="NpmInstall" Condition=" '$(DevServerRunning)' == 'false' " AfterTargets="CheckDevServerRunning" Inputs="$(SpaRoot)package-lock.json" Outputs="$(SpaRoot)node_modules\.npm_timestamp">
    <Message Importance="high" Text="Restoring dependencies using 'npm ci'. This should only take a few seconds..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm ci" />

    <!-- Touch an empty file so we know the last time we ran restore. If the timestamp on this file is greater than the
         timestamp on the package-lock.json file then this build step will be skipped. -->
    <Touch Files="$(SpaRoot)node_modules\.npm_timestamp" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <Target Name="RunVueCli" Condition=" '$(Configuration)' == 'Debug' " AfterTargets="BeforeBuild" DependsOnTargets="CheckDevServerRunning" Inputs="@(ClientSrc)" Outputs="$(MSBuildThisFileDirectory)obj\$(Configuration)\.vue_timestamp">

    <Message Importance="high" Text="Performing Webpack build (Mode: $(NpmBuild))" Condition="!$(DevServerRunning)" />
    
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run $(NpmBuild)" Condition="!$(DevServerRunning)">
      <Output TaskParameter="ExitCode" PropertyName="VueErrorCode" />
    </Exec>

    <Touch Files="$(MSBuildThisFileDirectory)obj\$(Configuration)\.vue_timestamp" AlwaysCreate="true" Condition=" '$(VueErrorCode)' == '0' And !$(DevServerRunning) ">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <!--
    In development, the dist files won't exist on the first run or when cloning to
    a different machine, so we need to rebuild them if not already present. But we
    can't do that if the dev server is running, so check that first, and bail out
    if it is.
  -->

  <Target Name="VueFirstBuild" AfterTargets="BeforeBuild" Condition=" !Exists('wwwroot\index.html') ">
    <Error Text="A first-run Webpack build is required, but cannot be done while the webpack dev server is running. Shut it down and build again." Condition=" $(DevServerRunning) " />
    
    <Message Importance="high" Text="First-run detected, forcing Webpack build..." />
    <Delete Files="$(MSBuildThisFileDirectory)obj\$(Configuration)\.vue_timestamp" />
  </Target>

  <Target Name="PublishRunVueCli" AfterTargets="ComputeFilesToPublish" DependsOnTargets="NpmInstall">

    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="wwwroot\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
