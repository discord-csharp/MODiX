// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modix.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Modix.Data.Migrations
{
    [DbContext(typeof(ModixContext))]
    [Migration("20200217042656_MessageStatsSnapshotReconciliation")]
    partial class MessageStatsSnapshotReconciliation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Modix.Data.Models.BehaviourConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BehaviourConfigurations");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.ClaimMappingEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Claim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleteActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("DeleteActionId")
                        .IsUnique();

                    b.ToTable("ClaimMappings");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.ConfigurationActionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("ClaimMappingId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignatedChannelMappingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignatedRoleMappingId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClaimMappingId");

                    b.HasIndex("DesignatedChannelMappingId");

                    b.HasIndex("DesignatedRoleMappingId");

                    b.HasIndex("GuildId", "CreatedById");

                    b.ToTable("ConfigurationActions");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.DesignatedChannelMappingEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleteActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("DeleteActionId")
                        .IsUnique();

                    b.ToTable("DesignatedChannelMappings");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.DesignatedRoleMappingEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleteActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("DeleteActionId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("DesignatedRoleMappings");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.GuildChannelEntity", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChannelId");

                    b.ToTable("GuildChannels");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.GuildRoleEntity", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("RoleId");

                    b.ToTable("GuildRoles");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.GuildUserEntity", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("FirstSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.HasKey("GuildId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GuildUsers");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.GuildUserParticipationStatistics", b =>
                {
                    b.Property<decimal>("AveragePerDay")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Percentile")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.ToTable("GuildUserParticipationStatistics");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.MessageCountByDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MessageCount")
                        .HasColumnType("integer");

                    b.ToTable("MessageCountByDate");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.MessageCountPerChannel", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MessageCount")
                        .HasColumnType("integer");

                    b.ToTable("MessageCountPerChannel");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.MessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StarboardEntryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("GuildId", "AuthorId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.PerUserMessageCount", b =>
                {
                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrentUser")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("PerUserMessageCount");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Modix.Data.Models.Emoji.EmojiEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmojiId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmojiName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnimated")
                        .HasColumnType("boolean");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmojiId");

                    b.HasIndex("EmojiName");

                    b.HasIndex("GuildId");

                    b.HasIndex("MessageId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UsageType");

                    b.HasIndex("UserId");

                    b.ToTable("Emoji");
                });

            modelBuilder.Entity("Modix.Data.Models.Emoji.EmojiStatsDto", b =>
                {
                    b.Property<decimal?>("EmojiId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("EmojiName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAnimated")
                        .HasColumnType("boolean");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("Uses")
                        .HasColumnType("integer");

                    b.ToTable("EmojiStatsDto");
                });

            modelBuilder.Entity("Modix.Data.Models.Emoji.GuildEmojiStats", b =>
                {
                    b.Property<DateTimeOffset>("OldestTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalUses")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueEmojis")
                        .HasColumnType("integer");

                    b.ToTable("GuildEmojiStats");
                });

            modelBuilder.Entity("Modix.Data.Models.Emoji.SingleEmojiStatsDto", b =>
                {
                    b.Property<decimal?>("EmojiId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("EmojiName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAnimated")
                        .HasColumnType("boolean");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<decimal>("TopUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("TopUserUses")
                        .HasColumnType("integer");

                    b.Property<int>("Uses")
                        .HasColumnType("integer");

                    b.ToTable("SingleEmojiStatsDto");
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.DeletedMessageBatchEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.ToTable("DeletedMessageBatches");
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.DeletedMessageEntity", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("BatchId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("GuildId", "AuthorId");

                    b.ToTable("DeletedMessages");
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.InfractionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleteActionId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RescindActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RescindReason")
                        .HasColumnType("text");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdateActionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("DeleteActionId")
                        .IsUnique();

                    b.HasIndex("RescindActionId")
                        .IsUnique();

                    b.HasIndex("UpdateActionId")
                        .IsUnique();

                    b.HasIndex("GuildId", "SubjectId");

                    b.ToTable("Infractions");
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.ModerationActionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedMessageBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InfractionId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalInfractionReason")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeletedMessageBatchId");

                    b.HasIndex("DeletedMessageId");

                    b.HasIndex("InfractionId");

                    b.HasIndex("GuildId", "CreatedById");

                    b.ToTable("ModerationActions");
                });

            modelBuilder.Entity("Modix.Data.Models.Promotions.PromotionActionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OldCommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("NewCommentId")
                        .IsUnique();

                    b.HasIndex("OldCommentId")
                        .IsUnique();

                    b.HasIndex("GuildId", "CreatedById");

                    b.ToTable("PromotionActions");
                });

            modelBuilder.Entity("Modix.Data.Models.Promotions.PromotionCampaignEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("CloseActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Outcome")
                        .HasColumnType("text");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TargetRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CloseActionId")
                        .IsUnique();

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.HasIndex("Outcome");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TargetRoleId");

                    b.HasIndex("GuildId", "SubjectId");

                    b.ToTable("PromotionCampaigns");
                });

            modelBuilder.Entity("Modix.Data.Models.Promotions.PromotionCommentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("CampaignId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifyActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sentiment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("ModifyActionId")
                        .IsUnique();

                    b.ToTable("PromotionComments");
                });

            modelBuilder.Entity("Modix.Data.Models.Tags.TagActionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewTagId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OldTagId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NewTagId")
                        .IsUnique();

                    b.HasIndex("OldTagId")
                        .IsUnique();

                    b.HasIndex("GuildId", "CreatedById");

                    b.ToTable("TagActions");
                });

            modelBuilder.Entity("Modix.Data.Models.Tags.TagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreateActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleteActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OwnerRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("Uses")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreateActionId")
                        .IsUnique();

                    b.HasIndex("DeleteActionId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerRoleId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("GuildId", "OwnerUserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.ClaimMappingEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Core.ConfigurationActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Core.ClaimMappingEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.ConfigurationActionEntity", "DeleteAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Core.ClaimMappingEntity", "DeleteActionId");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.ConfigurationActionEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Core.ClaimMappingEntity", "ClaimMapping")
                        .WithMany()
                        .HasForeignKey("ClaimMappingId");

                    b.HasOne("Modix.Data.Models.Core.DesignatedChannelMappingEntity", "DesignatedChannelMapping")
                        .WithMany()
                        .HasForeignKey("DesignatedChannelMappingId");

                    b.HasOne("Modix.Data.Models.Core.DesignatedRoleMappingEntity", "DesignatedRoleMapping")
                        .WithMany()
                        .HasForeignKey("DesignatedRoleMappingId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("GuildId", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Core.DesignatedChannelMappingEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Core.GuildChannelEntity", "Channel")
                        .WithMany("DesignatedChannelMappings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.ConfigurationActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Core.DesignatedChannelMappingEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.ConfigurationActionEntity", "DeleteAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Core.DesignatedChannelMappingEntity", "DeleteActionId");
                });

            modelBuilder.Entity("Modix.Data.Models.Core.DesignatedRoleMappingEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Core.ConfigurationActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Core.DesignatedRoleMappingEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.ConfigurationActionEntity", "DeleteAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Core.DesignatedRoleMappingEntity", "DeleteActionId");

                    b.HasOne("Modix.Data.Models.Core.GuildRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Core.GuildUserEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Core.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Core.MessageEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Core.GuildChannelEntity", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("GuildId", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.DeletedMessageBatchEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Moderation.ModerationActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Moderation.DeletedMessageBatchEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.DeletedMessageEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Moderation.DeletedMessageBatchEntity", "Batch")
                        .WithMany("DeletedMessages")
                        .HasForeignKey("BatchId");

                    b.HasOne("Modix.Data.Models.Core.GuildChannelEntity", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Moderation.ModerationActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Moderation.DeletedMessageEntity", "CreateActionId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "Author")
                        .WithMany()
                        .HasForeignKey("GuildId", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.InfractionEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Moderation.ModerationActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Moderation.InfractionEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Moderation.ModerationActionEntity", "DeleteAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Moderation.InfractionEntity", "DeleteActionId");

                    b.HasOne("Modix.Data.Models.Moderation.ModerationActionEntity", "RescindAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Moderation.InfractionEntity", "RescindActionId");

                    b.HasOne("Modix.Data.Models.Moderation.ModerationActionEntity", "UpdateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Moderation.InfractionEntity", "UpdateActionId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "Subject")
                        .WithMany("Infractions")
                        .HasForeignKey("GuildId", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.ModerationActionEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Moderation.DeletedMessageBatchEntity", "DeletedMessageBatch")
                        .WithMany()
                        .HasForeignKey("DeletedMessageBatchId");

                    b.HasOne("Modix.Data.Models.Moderation.DeletedMessageEntity", "DeletedMessage")
                        .WithMany()
                        .HasForeignKey("DeletedMessageId");

                    b.HasOne("Modix.Data.Models.Moderation.InfractionEntity", "Infraction")
                        .WithMany()
                        .HasForeignKey("InfractionId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("GuildId", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Promotions.PromotionActionEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Promotions.PromotionCampaignEntity", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("Modix.Data.Models.Promotions.PromotionCommentEntity", "NewComment")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Promotions.PromotionActionEntity", "NewCommentId");

                    b.HasOne("Modix.Data.Models.Promotions.PromotionCommentEntity", "OldComment")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Promotions.PromotionActionEntity", "OldCommentId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("GuildId", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Promotions.PromotionCampaignEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Promotions.PromotionActionEntity", "CloseAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Promotions.PromotionCampaignEntity", "CloseActionId");

                    b.HasOne("Modix.Data.Models.Promotions.PromotionActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Promotions.PromotionCampaignEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.GuildRoleEntity", "TargetRole")
                        .WithMany()
                        .HasForeignKey("TargetRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "Subject")
                        .WithMany("PromotionCampaigns")
                        .HasForeignKey("GuildId", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Promotions.PromotionCommentEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Promotions.PromotionCampaignEntity", "Campaign")
                        .WithMany("Comments")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Promotions.PromotionActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Promotions.PromotionCommentEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Promotions.PromotionActionEntity", "ModifyAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Promotions.PromotionCommentEntity", "ModifyActionId");
                });

            modelBuilder.Entity("Modix.Data.Models.Tags.TagActionEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Tags.TagEntity", "NewTag")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Tags.TagActionEntity", "NewTagId");

                    b.HasOne("Modix.Data.Models.Tags.TagEntity", "OldTag")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Tags.TagActionEntity", "OldTagId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("GuildId", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modix.Data.Models.Tags.TagEntity", b =>
                {
                    b.HasOne("Modix.Data.Models.Tags.TagActionEntity", "CreateAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Tags.TagEntity", "CreateActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modix.Data.Models.Tags.TagActionEntity", "DeleteAction")
                        .WithOne()
                        .HasForeignKey("Modix.Data.Models.Tags.TagEntity", "DeleteActionId");

                    b.HasOne("Modix.Data.Models.Core.GuildRoleEntity", "OwnerRole")
                        .WithMany()
                        .HasForeignKey("OwnerRoleId");

                    b.HasOne("Modix.Data.Models.Core.GuildUserEntity", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("GuildId", "OwnerUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
