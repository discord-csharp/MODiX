// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modix.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Modix.Data.Migrations
{
    [DbContext(typeof(ModixContext))]
    partial class ModixContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Modix.Data.Models.ChannelLimit", b =>
                {
                    b.Property<long>("ChannelLimitID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ChannelId");

                    b.Property<long?>("GuildId");

                    b.Property<string>("ModuleName");

                    b.HasKey("ChannelLimitID");

                    b.HasIndex("GuildId");

                    b.ToTable("ChannelLimits");
                });

            modelBuilder.Entity("Modix.Data.Models.DiscordGuild", b =>
                {
                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<long>("OwnerUserId");

                    b.HasKey("GuildId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("DiscordGuilds");
                });

            modelBuilder.Entity("Modix.Data.Models.DiscordMessage", b =>
                {
                    b.Property<long>("DiscordMessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachments");

                    b.Property<long?>("AuthorUserId");

                    b.Property<string>("Content");

                    b.Property<long?>("DiscordGuildGuildId");

                    b.Property<long>("DiscordId");

                    b.HasKey("DiscordMessageId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("DiscordGuildGuildId");

                    b.ToTable("DiscordMessages");
                });

            modelBuilder.Entity("Modix.Data.Models.DiscordUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUrl");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<long>("Discriminator");

                    b.Property<DateTimeOffset>("FirstSeen");

                    b.Property<bool>("IsBot");

                    b.Property<DateTimeOffset>("LastSeen");

                    b.Property<string>("Nickname");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("Modix.Data.Models.GuildConfig", b =>
                {
                    b.Property<long>("GuildConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AdminRoleId");

                    b.Property<long>("GuildId");

                    b.Property<long>("ModeratorRoleId");

                    b.HasKey("GuildConfigId");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.ToTable("GuildConfig");
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.Infraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan?>("Duration");

                    b.Property<bool>("IsRescinded");

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.Property<long>("SubjectId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Infractions");
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.ModerationAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTimeOffset>("Created");

                    b.Property<long>("CreatedById");

                    b.Property<long?>("InfractionId")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InfractionId");

                    b.ToTable("ModerationActions");
                });

            modelBuilder.Entity("Modix.Data.Models.PromotionCampaign", b =>
                {
                    b.Property<long>("PromotionCampaignId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PromotionForUserId");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("PromotionCampaignId");

                    b.HasIndex("PromotionForUserId");

                    b.ToTable("PromotionCampaigns");
                });

            modelBuilder.Entity("Modix.Data.Models.PromotionComment", b =>
                {
                    b.Property<long>("PromotionCommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTimeOffset>("PostedDate");

                    b.Property<long?>("PromotionCampaignId");

                    b.Property<int>("Sentiment");

                    b.HasKey("PromotionCommentId");

                    b.HasIndex("PromotionCampaignId");

                    b.ToTable("PromotionComments");
                });

            modelBuilder.Entity("Modix.Data.Models.ChannelLimit", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordGuild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");
                });

            modelBuilder.Entity("Modix.Data.Models.DiscordGuild", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modix.Data.Models.DiscordMessage", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");

                    b.HasOne("Modix.Data.Models.DiscordGuild", "DiscordGuild")
                        .WithMany()
                        .HasForeignKey("DiscordGuildGuildId");
                });

            modelBuilder.Entity("Modix.Data.Models.GuildConfig", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordGuild")
                        .WithOne("Config")
                        .HasForeignKey("Modix.Data.Models.GuildConfig", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.Infraction", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordUser", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modix.Data.Models.Moderation.ModerationAction", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Modix.Data.Models.Moderation.Infraction", "Infraction")
                        .WithMany("ModerationActions")
                        .HasForeignKey("InfractionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modix.Data.Models.PromotionCampaign", b =>
                {
                    b.HasOne("Modix.Data.Models.DiscordUser", "PromotionFor")
                        .WithMany()
                        .HasForeignKey("PromotionForUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modix.Data.Models.PromotionComment", b =>
                {
                    b.HasOne("Modix.Data.Models.PromotionCampaign", "PromotionCampaign")
                        .WithMany("Comments")
                        .HasForeignKey("PromotionCampaignId");
                });
#pragma warning restore 612, 618
        }
    }
}
