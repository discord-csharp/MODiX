@using Discord.WebSocket;
@using Modix.Web.Models;
@using Modix.Web.Services;
@using MudBlazor
@using System.Security.Claims;
@using Modix.Services.Core;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <MudText>Sorry, you don't have access to that page.</MudText>
                </NotAuthorized>
                <Authorizing>
                    <MudText>Please wait...</MudText>
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudText>Sorry, there's nothing at this address.</MudText>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public string? SelectedGuild { get; set; }

    [Inject]
    public SessionState SessionState { get; set; } = null!;

    [Inject]
    public DiscordUserService DiscordUserService { get; set; } = null!;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    public Modix.Services.Core.IAuthorizationService AuthorizationService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? false)
            return;

        if (!ulong.TryParse(SelectedGuild, out var selectedGuildId))
            return;

        SessionState.SelectedGuild = selectedGuildId;

        var currentUser = await DiscordUserService.GetCurrentUserAsync();
        await AuthorizationService.OnAuthenticatedAsync(currentUser!.Id, currentUser.Guild.Id, currentUser.Roles.Select(x => x.Id).ToList());
    }
}