@page "/tags"
@attribute [Authorize]
@using Modix.Data.Models.Core;
@using Modix.Data.Models.Tags;
@using Modix.Services.Tags;
@using Modix.Web.Models;
@using Modix.Web.Models.Tags;
@using Modix.Web.Services;
@using MudBlazor
@using System.Globalization;

<PageTitle>Modix - Tags</PageTitle>

<CascadingAuthenticationState>

    <MudContainer>
        <MudText Typo="Typo.h3">Tags</MudText>
        @if (Data is not null)
        {
            <MudDialog @bind-IsVisible="_createDialogVisible" Options="new DialogOptions { FullWidth= true }">
                <TitleContent>
                    <MudText Typo="Typo.h5">Create Tag</MudText>
                </TitleContent>
                <DialogContent>
                    <MudTextField @bind-Value="_tagNameValue" Label="Name"></MudTextField>
                    <MudTextField @bind-Value="_tagContentValue" Label="Content" Lines="5" Immediate="true"></MudTextField>
                    <MudText Typo="Typo.subtitle1">Preview</MudText>
                    <MudMarkdown Value="@_tagContentValue" />
                </DialogContent>
                <DialogActions>
                    <div style="justify-content: left; flex-grow: 1;">
                        <MudButton Disabled="@(_tagNameValue is null || _tagContentValue is null)" Color="Color.Success" OnClick="SaveTag">Save</MudButton>
                    </div>
                    <MudButton Color="Color.Error" OnClick="ToggleDialog">Cancel</MudButton>
                </DialogActions>
            </MudDialog>

            <MudTable Items="Data" SortLabel="Sort By" Bordered="true" Filter="FilterFunction">
                <ToolBarContent>
                    <AuthorizeView Context="e" Policy="@nameof(AuthorizationClaim.CreateTag)">
                        <MudButton OnClick="ToggleDialog" StartIcon="@Icons.Material.Filled.Create" Color="Color.Primary">Create</MudButton>
                    </AuthorizeView>
                    <MudButton OnClick="FetchData" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary">Refresh</MudButton>
                    <MudSpacer/>
                    <MudTextField DebounceInterval="1000" @bind-Value="query" Placeholder="Filter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Style="text-align:center"><MudTableSortLabel T="TagData" SortBy="x => x.Name">Name</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center"><MudTableSortLabel T="TagData" SortBy="x => x.Created">Last Modified</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center"><MudTableSortLabel T="TagData" SortBy="x => x.OwnerName">Owner</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center"><MudTableSortLabel T="TagData" SortBy="x => x.Content">Content</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center"><MudTableSortLabel T="TagData" SortBy="x => x.Uses">Uses</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate Context="tag">
                    <MudTd DataLabel="Name">@tag.Name</MudTd>
                    <MudTd style="white-space:nowrap" DataLabel="Last Modified">@tag.Created.ToString("dd/MM/yy, h:MM:ss tt")</MudTd>
                    <MudTd DataLabel="Owner">@tag.OwnerName</MudTd>
                    <MudTd DataLabel="Content">
                        <MudMarkdown Value="@tag.Content"/>
                    </MudTd>
                    <MudTd DataLabel="Uses">@tag.Uses</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new [] { 10, 20, 30, 40, 50, int.MaxValue }" ></MudTablePager>
                </PagerContent>
            </MudTable>
        }
    </MudContainer>

</CascadingAuthenticationState>

@code {
    [Inject]
    ITagService TagService { get; set; } = null!;

    [Inject]
    DiscordUserService DiscordUserService { get; set; } = null!;

    [Inject]
    SessionState SessionState { get; set; } = null!;

    [Inject]
    IDialogService DialogService { get; set; } = null!;

    TagData[]? Data { get; set; }
    string? query;
    string? _tagNameValue;
    string? _tagContentValue;
    bool _createDialogVisible;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await FetchData();

        StateHasChanged();
    }

    private async Task FetchData()
    {
        var currentGuild = SessionState.SelectedGuild;

        var summaries = await TagService.GetSummariesAsync(new TagSearchCriteria
        {
            GuildId = currentGuild,
        });

        Data = summaries
            .Select(TagData.CreateFromSummary)
            .ToArray();

        // foreach (var tag in data)
        // {
        //     // TODO Revisit this functionality
        //     tag.CanMaintain = false;
        // }
    }

    private bool FilterFunction(TagData tag)
    {
        if (string.IsNullOrWhiteSpace(query))
            return true;

        if (tag.OwnerUser is not null && (tag.OwnerUser.Username.Contains(query, StringComparison.OrdinalIgnoreCase) || tag.OwnerUser.Id.ToString() == query))
            return true;

        if (tag.OwnerRole is not null && (tag.OwnerRole.Name.Contains(query, StringComparison.OrdinalIgnoreCase) || tag.OwnerRole.Id.ToString() == query))
            return true;

        if (tag.Name.Contains(query, StringComparison.OrdinalIgnoreCase))
            return true;

        if (tag.Content.Contains(query, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task SaveTag()
    {
        var currentUser = DiscordUserService.GetCurrentUser();
        await TagService.CreateTagAsync(currentUser!.Guild.Id, currentUser.Id, _tagNameValue, _tagContentValue);
        var createdTag = await TagService.GetTagAsync(currentUser.Guild.Id, _tagNameValue);
        Data = Data!.Append(TagData.CreateFromSummary(createdTag)).ToArray();

        _createDialogVisible = false;
    }

    private void ToggleDialog()
    {
        _createDialogVisible = !_createDialogVisible;
    }
}
