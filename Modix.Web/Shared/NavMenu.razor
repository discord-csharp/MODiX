@using AspNet.Security.OAuth.Discord;
@using Discord.WebSocket;
@using Modix.Data.Models.Core;
@using Modix.Web.Models;
@using Modix.Web.Services;
@using MudBlazor;
@using System.Security.Claims;

<CascadingAuthenticationState>
   <MudAppBar Elevation="0" Dense="true" Fixed="false" DisableGutters="true">
        <AuthorizeView>
            <Authorized>
                <div class="d-flex">
                    <MudNavLink Style="width:auto" IconColor="Color.Surface" Href="" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                    <MudNavLink Style="width:auto" IconColor="Color.Surface" Href="stats" Icon="@Icons.Material.Filled.FormatListNumbered">Stats</MudNavLink>
                    <MudNavLink Style="width:auto" IconColor="Color.Surface" Href="commands" Icon="@Icons.Material.Filled.KeyboardCommandKey">Commands</MudNavLink>
                    <MudNavLink Style="width:auto" IconColor="Color.Surface" Href="userlookup" Icon="@Icons.Material.Filled.Search">User Lookup</MudNavLink>
                    <MudNavLink Style="width:auto" IconColor="Color.Surface" Href="tags" Icon="@Icons.Material.Filled.Tag">Tags</MudNavLink>
                    <AuthorizeView Context="e" Policy="@nameof(AuthorizationClaim.PromotionsRead)">
                        <MudNavLink IconColor="Color.Surface" Style="width:auto" Href="promotions" Icon="@Icons.Material.Filled.Celebration">Promotions</MudNavLink>
                    </AuthorizeView>
                    <AuthorizeView Context="e" Policy="@nameof(AuthorizationClaim.ModerationRead)">
                        <MudNavLink IconColor="Color.Surface" Style="width:auto" H Href="logs" Icon="@Icons.Material.Filled.DocumentScanner">Logs</MudNavLink>
                    </AuthorizeView>
                </div>

                <MudSpacer />

                <div class="d-flex" style="align-items:center">
                    @if (AvatarUrl is not null && Username is not null)
                    {
                        <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomCenter" FullWidth="true">
                            <ActivatorContent>
                                <div class="d-flex" style="align-items: center">
                                    <MudImage Src="@AvatarUrl" Style="margin-right:0.5em; border-radius:4px; height:32px; max-height:32px;" />
                                    <MudText Style="font-size:24px;font-weight:600">@Username</MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" />
                                </div>
                            </ActivatorContent>
                            <ChildContent>
                                <MudNavLink IconColor="Color.Surface" Icon="@Icons.Material.Filled.Logout" Href="logout">Log Out</MudNavLink>
                            </ChildContent>
                        </MudMenu>
                    }
                    <MudDivider Style="margin-right: .66rem" Vertical="true" FlexItem="true"/>
                    <MudMenu AnchorOrigin="Origin.BottomRight">
                        <ActivatorContent>
                            <div class="d-flex" style="align-items: center">
                                <MudImage Style="vertical-align: bottom" Src="@(SelectedGuild?.IconUrl)" Height="32" Width="32" Class="rounded-lg" />
                                <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown"/>
                            </div>
                        </ActivatorContent>
                        <ChildContent>
                        @foreach (var guildOption in GuildOptions)
                        {
                            <MudMenuItem Style="white-space: nowrap" OnClick="() => SelectGuild(guildOption.Id)">
                                <MudImage style="vertical-align: bottom" Src="@guildOption.IconUrl" Height="24" Width="24" Class="rounded-lg" />
                                @guildOption.Name
                            </MudMenuItem>
                        }
                        </ChildContent>
                    </MudMenu>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="d-flex">
                    <MudNavLink IconColor="Color.Surface" Style="width:auto" Href="" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                    <MudNavLink IconColor="Color.Surface" Style="width:auto" Href="commands" Icon="@Icons.Material.Filled.KeyboardCommandKey">Commands</MudNavLink>
                </div>
                <MudSpacer/>
                <div class="d-flex">
                    <MudNavLink IconColor="Color.Surface" Href="login" Icon="@Icons.Material.Filled.Login">Log In</MudNavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
</CascadingAuthenticationState>

@code {

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; } = null!;

    [Inject]
    public DiscordUserService DiscordUserService { get; set; } = null!;

    [Inject]
    public CookieService CookieService { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private string? AvatarUrl { get; set; }
    private string? Username { get; set; }

    private IEnumerable<GuildOption> GuildOptions { get; set; } = Array.Empty<GuildOption>();
    private SocketGuild? SelectedGuild { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null)
            return;

        var authState = await AuthenticationState;
        if (!authState.User.Identity?.IsAuthenticated ?? false)
            return;

        var avatarHash = authState.User.FindFirst(x => x.Type == DiscordAuthenticationConstants.Claims.AvatarHash)?.Value;
        var userId = authState.User.FindFirst(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

        AvatarUrl = $"https://cdn.discordapp.com/avatars/{userId}/{avatarHash}.png";
        Username = authState.User.Identity?.Name;

        GuildOptions = await DiscordUserService.GetGuildOptionsAsync();
        SelectedGuild = DiscordUserService.GetUserGuild();
    }

    private async Task SelectGuild(ulong guildId)
    {
        await CookieService.SetSelectedGuildAsync(guildId);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
