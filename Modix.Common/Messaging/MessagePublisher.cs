using System;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.DependencyInjection;

namespace Modix.Common.Messaging
{
    /// <summary>
    /// Describes an object that publishes application-wide notifications.
    /// </summary>
    public interface IMessagePublisher
    {
        /// <summary>
        /// Publishes a notification to be handled by all registered <see cref="INotificationHandler{TNotification}"/> objects.
        /// </summary>
        /// <typeparam name="TNotification">The type of notification to be published.</typeparam>
        /// <param name="notification">The notification data to be published.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A <see cref="Task"/> that will complete when all handlers have completed handling the notification.</returns>
        Task PublishAsync<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : notnull, INotification;

        /// <summary>
        /// Publishes a request to be handled by a registered <see cref="IRequestHandler{TRequest, TResponse}"/> object.
        /// </summary>
        /// <typeparam name="TRequest">The type of request to be published.</typeparam>
        /// <typeparam name="TResponse">The type of response to be generated by the handler.</typeparam>
        /// <param name="request">The request data to be published.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>
        /// A <see cref="Task"/> that will complete when the handler has completed handling the request,
        /// containing the generated response data.
        /// </returns>
        Task<TResponse> PublishAsync<TRequest, TResponse>(TRequest request, CancellationToken cancellationToken = default) where TRequest : notnull, IRequest<TResponse>;
    }

    /// <inheritdoc />
    [ServiceBinding(ServiceLifetime.Scoped)]
    public class MessagePublisher : IMessagePublisher
    {
        /// <summary>
        /// Constructs a new <see cref="MessagePublisher"/> with the given dependencies.
        /// </summary>
        public MessagePublisher(IServiceProvider serviceProvider)
        {
            ServiceProvider = serviceProvider;
        }

        /// <inheritdoc />
        public async Task PublishAsync<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : notnull, INotification
        {
            if (notification == null)
                throw new ArgumentNullException(nameof(notification));

            foreach (var handler in ServiceProvider.GetServices<INotificationHandler<TNotification>>())
                await handler.HandleNotificationAsync(notification, cancellationToken);
        }

        /// <inheritdoc />
        public Task<TResponse> PublishAsync<TRequest, TResponse>(TRequest request, CancellationToken cancellationToken = default) where TRequest : notnull, IRequest<TResponse>
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            return ServiceProvider.GetRequiredService<IRequestHandler<TRequest, TResponse>>()
                .HandleRequestAsync(request, cancellationToken);
        }

        /// <summary>
        /// An <see cref="IServiceProvider"/> used to retrieve message handlers.
        /// </summary>
        internal protected IServiceProvider ServiceProvider { get; }
    }
}
